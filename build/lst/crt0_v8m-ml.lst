ARM GAS  /tmp/ccSVH6a2.s 			page 1


   1              	# 1 ".//os/common/startup/ARMCMx/compilers/GCC/crt0_v8m-ml.S"
   1              	/*
   1              	...
   0              	
   0              	
   2              	    ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio
   3              	
   4              	    Licensed under the Apache License, Version 2.0 (the "License");
   5              	    you may not use this file except in compliance with the License.
   6              	    You may obtain a copy of the License at
   7              	
   8              	        http://www.apache.org/licenses/LICENSE-2.0
   9              	
  10              	    Unless required by applicable law or agreed to in writing, software
  11              	    distributed under the License is distributed on an "AS IS" BASIS,
  12              	    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13              	    See the License for the specific language governing permissions and
  14              	    limitations under the License.
  15              	*/
  16              	
  17              	/**
  18              	 * @file    crt0_v8m-ml.S
  19              	 * @brief   Generic ARMv8-M mainline (Cortex-M33/M55) startup file for ChibiOS.
  20              	 *
  21              	 * @addtogroup ARMCMx_GCC_STARTUP_V8M_ML
  22              	 * @{
  23              	 */
  24              	
  25              	/*===========================================================================*/
  26              	/* Module constants.                                                         */
  27              	/*===========================================================================*/
  28              	
  29              	#if !defined(FALSE) || defined(__DOXYGEN__)
  30              	#define FALSE                               0
  31              	#endif
  32              	
  33              	#if !defined(TRUE) || defined(__DOXYGEN__)
  34              	#define TRUE                                1
  35              	#endif
  36              	
  37              	#define CONTROL_MODE_PRIVILEGED             0
  38              	#define CONTROL_MODE_UNPRIVILEGED           1
  39              	#define CONTROL_USE_MSP                     0
  40              	#define CONTROL_USE_PSP                     2
  41              	#define CONTROL_FPCA                        4
  42              	
  43              	#define FPCCR_ASPEN                         (1 << 31)
  44              	#define FPCCR_LSPEN                         (1 << 30)
  45              	
  46              	#define SCB_VTOR                            0xE000ED08
  47              	#define SCB_CPACR                           0xE000ED88
  48              	#define SCB_FPCCR                           0xE000EF34
  49              	#define SCB_FPDSCR                          0xE000EF3C
  50              	
  51              	/*===========================================================================*/
  52              	/* Module pre-compile time settings.                                         */
  53              	/*===========================================================================*/
ARM GAS  /tmp/ccSVH6a2.s 			page 2


  54              	
  55              	/**
  56              	 * @brief   Enforces initialization of MSP.
  57              	 * @note    This is required if the boot process is not reliable for whatever
  58              	 *          reason (bad ROMs, bad bootloaders, bad debuggers=.
  59              	 */
  60              	#if !defined(CRT0_FORCE_MSP_INIT) || defined(__DOXYGEN__)
  61              	#define CRT0_FORCE_MSP_INIT                 TRUE
  62              	#endif
  63              	
  64              	/**
  65              	 * @brief   VTOR special register initialization.
  66              	 * @details VTOR is initialized to point to the vectors table.
  67              	 */
  68              	#if !defined(CRT0_VTOR_INIT) || defined(__DOXYGEN__)
  69              	#define CRT0_VTOR_INIT                      TRUE
  70              	#endif
  71              	
  72              	/**
  73              	 * @brief   FPU initialization switch.
  74              	 */
  75              	#if !defined(CRT0_INIT_FPU) || defined(__DOXYGEN__)
  76              	#if defined(CORTEX_USE_FPU) || defined(__DOXYGEN__)
  77              	#define CRT0_INIT_FPU                       CORTEX_USE_FPU
  78              	#else
  79              	#define CRT0_INIT_FPU                       FALSE
  80              	#endif
  81              	#endif
  82              	
  83              	/**
  84              	 * @brief   Control special register initialization value.
  85              	 * @details The system is setup to run in privileged mode using the PSP
  86              	 *          stack (dual stack mode).
  87              	 */
  88              	#if !defined(CRT0_CONTROL_INIT) || defined(__DOXYGEN__)
  89              	#define CRT0_CONTROL_INIT                   (CONTROL_USE_PSP |              \
  90              	                                             CONTROL_MODE_PRIVILEGED)
  91              	#endif
  92              	
  93              	/**
  94              	 * @brief   Core initialization switch.
  95              	 */
  96              	#if !defined(CRT0_INIT_CORE) || defined(__DOXYGEN__)
  97              	#define CRT0_INIT_CORE                      TRUE
  98              	#endif
  99              	
 100              	/**
 101              	 * @brief   Stack segments initialization switch.
 102              	 */
 103              	#if !defined(CRT0_STACKS_FILL_PATTERN) || defined(__DOXYGEN__)
 104              	#define CRT0_STACKS_FILL_PATTERN            0x55555555
 105              	#endif
 106              	
 107              	/**
 108              	 * @brief   Stack segments initialization switch.
 109              	 */
 110              	#if !defined(CRT0_INIT_STACKS) || defined(__DOXYGEN__)
ARM GAS  /tmp/ccSVH6a2.s 			page 3


 111              	#define CRT0_INIT_STACKS                    TRUE
 112              	#endif
 113              	
 114              	/**
 115              	 * @brief   Vectors table initialization.
 116              	 * @details Vectors are copied in RAM on startup.
 117              	 */
 118              	#if !defined(CRT0_INIT_VECTORS) || defined(__DOXYGEN__)
 119              	#define CRT0_INIT_VECTORS                   FALSE
 120              	#endif
 121              	
 122              	/**
 123              	 * @brief   DATA segment initialization switch.
 124              	 */
 125              	#if !defined(CRT0_INIT_DATA) || defined(__DOXYGEN__)
 126              	#define CRT0_INIT_DATA                      TRUE
 127              	#endif
 128              	
 129              	/**
 130              	 * @brief   BSS segment initialization switch.
 131              	 */
 132              	#if !defined(CRT0_INIT_BSS) || defined(__DOXYGEN__)
 133              	#define CRT0_INIT_BSS                       TRUE
 134              	#endif
 135              	
 136              	/**
 137              	 * @brief   RAM areas initialization switch.
 138              	 */
 139              	#if !defined(CRT0_INIT_RAM_AREAS) || defined(__DOXYGEN__)
 140              	#define CRT0_INIT_RAM_AREAS                 TRUE
 141              	#endif
 142              	
 143              	/**
 144              	 * @brief   Constructors invocation switch.
 145              	 */
 146              	#if !defined(CRT0_CALL_CONSTRUCTORS) || defined(__DOXYGEN__)
 147              	#define CRT0_CALL_CONSTRUCTORS              TRUE
 148              	#endif
 149              	
 150              	/**
 151              	 * @brief   Destructors invocation switch.
 152              	 */
 153              	#if !defined(CRT0_CALL_DESTRUCTORS) || defined(__DOXYGEN__)
 154              	#define CRT0_CALL_DESTRUCTORS               TRUE
 155              	#endif
 156              	
 157              	/**
 158              	 * @brief   FPU FPCCR register initialization value.
 159              	 * @note    Only used if @p CRT0_INIT_FPU is equal to @p TRUE.
 160              	 */
 161              	#if !defined(CRT0_FPCCR_INIT) || defined(__DOXYGEN__)
 162              	#define CRT0_FPCCR_INIT                     (FPCCR_ASPEN | FPCCR_LSPEN)
 163              	#endif
 164              	
 165              	/**
 166              	 * @brief   CPACR register initialization value.
 167              	 * @note    Only used if @p CRT0_INIT_FPU is equal to @p TRUE.
ARM GAS  /tmp/ccSVH6a2.s 			page 4


 168              	 */
 169              	#if !defined(CRT0_CPACR_INIT) || defined(__DOXYGEN__)
 170              	#define CRT0_CPACR_INIT                     0x00F00000
 171              	#endif
 172              	
 173              	/*===========================================================================*/
 174              	/* Code section.                                                             */
 175              	/*===========================================================================*/
 176              	
 177              	#if !defined(__DOXYGEN__)
 178              	
 179              	                .syntax unified
 180              	                .cpu    cortex-m33
 181              	#if CRT0_INIT_FPU == TRUE
 182              	                .fpu    fpv4-sp-d16
 183              	#else
 184              	                .fpu    softvfp
 185              	#endif
 186              	
 187              	                .thumb
 188              	                .text
 189              	
 190              	/*
 191              	 * CRT0 entry point.
 192              	 */
 193              	                .align  2
 194              	                .thumb_func
 195              	                .global _crt0_entry
 196              	_crt0_entry:
 197              	                /* Interrupts are globally masked initially.*/
 198 0000 72B6     	                cpsid   i
 199              	
 200              	#if CRT0_FORCE_MSP_INIT == TRUE
 201              	                /* MSP stack pointers initialization.*/
 202 0002 2948     	                ldr     r0, =__main_stack_end__
 203 0004 80F30888 	                msr     MSP, r0
 204              	#endif
 205 0008 2848     	                ldr     r0, =__main_stack_base__
 206 000a 80F30A88 	                msr     MSPLIM, r0
 207              	
 208              	                /* PSP stack pointers initialization.*/
 209 000e 2848     	                ldr     r0, =__process_stack_end__
 210 0010 80F30988 	                msr     PSP, r0
 211 0014 2748     	                ldr     r0, =__process_stack_base__
 212 0016 80F30B88 	                msr     PSPLIM, r0
 213              	
 214              	#if CRT0_VTOR_INIT == TRUE
 215 001a 2748     	                ldr     r0, =_vectors
 216 001c 2749     	                ldr     r1, =SCB_VTOR
 217 001e 0860     	                str     r0, [r1]
 218              	#endif
 219              	
 220              	#if CRT0_INIT_FPU == TRUE
 221              	                /* FPU FPCCR initialization.*/
 222              	                movw    r0, #CRT0_FPCCR_INIT & 0xFFFF
 223              	                movt    r0, #CRT0_FPCCR_INIT >> 16
 224              	                movw    r1, #SCB_FPCCR & 0xFFFF
ARM GAS  /tmp/ccSVH6a2.s 			page 5


 225              	                movt    r1, #SCB_FPCCR >> 16
 226              	                str     r0, [r1]
 227              	                dsb
 228              	                isb
 229              	
 230              	                /* CPACR initialization.*/
 231              	                movw    r0, #CRT0_CPACR_INIT & 0xFFFF
 232              	                movt    r0, #CRT0_CPACR_INIT >> 16
 233              	                movw    r1, #SCB_CPACR & 0xFFFF
 234              	                movt    r1, #SCB_CPACR >> 16
 235              	                str     r0, [r1]
 236              	                dsb
 237              	                isb
 238              	
 239              	                /* FPU FPSCR initially cleared.*/
 240              	                mov     r0, #0
 241              	                vmsr    FPSCR, r0
 242              	
 243              	                /* FPU FPDSCR initially cleared.*/
 244              	                movw    r1, #SCB_FPDSCR & 0xFFFF
 245              	                movt    r1, #SCB_FPDSCR >> 16
 246              	                str     r0, [r1]
 247              	
 248              	                /* Enforcing FPCA bit in the CONTROL register.*/
 249              	                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA
 250              	
 251              	#else
 252 0020 0220     	                movs    r0, #CRT0_CONTROL_INIT
 253              	#endif
 254              	
 255              	                /* CONTROL register initialization as configured.*/
 256 0022 80F31488 	                msr     CONTROL, r0
 257 0026 BFF36F8F 	                isb
 258              	
 259              	#if CRT0_INIT_CORE == TRUE
 260              	                /* Core initialization.*/
 261 002a FFF7FEFF 	                bl      __cpu_init
 262              	#endif
 263              	
 264              	                /* Early initialization.*/
 265 002e FFF7FEFF 	                bl      __early_init
 266              	
 267              	#if CRT0_INIT_STACKS == TRUE
 268 0032 4FF05530 	                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 269              	                /* Main Stack initialization. Note, it assumes that the
 270              	                   stack size is a multiple of 4 so the linker file must
 271              	                   ensure this.*/
 272 0036 1D49     	                ldr     r1, =__main_stack_base__
 273 0038 1B4A     	                ldr     r2, =__main_stack_end__
 274              	msloop:
 275 003a 9142     	                cmp     r1, r2
 276 003c 3CBF     	                itt     lo
 277 003e 41F8040B 	                strlo   r0, [r1], #4
 278 0042 FAE7     	                blo     msloop
 279              	
 280              	                /* Process Stack initialization. Note, it assumes that the
 281              	                   stack size is a multiple of 4 so the linker file must
ARM GAS  /tmp/ccSVH6a2.s 			page 6


 282              	                   ensure this.*/
 283 0044 1B49     	                ldr     r1, =__process_stack_base__
 284 0046 1A4A     	                ldr     r2, =__process_stack_end__
 285              	psloop:
 286 0048 9142     	                cmp     r1, r2
 287 004a 3CBF     	                itt     lo
 288 004c 41F8040B 	                strlo   r0, [r1], #4
 289 0050 FAE7     	                blo     psloop
 290              	#endif
 291              	
 292              	#if CRT0_INIT_VECTORS == TRUE
 293              	                /* Vectors initialization. Note, it assumes that the vectors
 294              	                   size is a multiple of 4 so the linker file must ensure
 295              	                   this.*/
 296              	                ldr     r1, =__textvectors_base__
 297              	                ldr     r2, =__vectors_base__
 298              	                ldr     r3, =__vectors_end__
 299              	                mov     r4, r2
 300              	vloop:
 301              	                cmp     r2, r3
 302              	                ittt    lo
 303              	                ldrlo   r0, [r1], #4
 304              	                strlo   r0, [r2], #4
 305              	                blo     vloop
 306              	
 307              	                /* VTOR now pointing to the RAM table.*/
 308              	                ldr     r1, =SCB_VTOR
 309              	                str     r4, [r1]
 310              	#endif
 311              	
 312              	#if CRT0_INIT_DATA == TRUE
 313              	                /* Data initialization. Note, it assumes that the DATA
 314              	                   size is a multiple of 4 so the linker file must ensure
 315              	                   this.*/
 316 0052 1B49     	                ldr     r1, =__textdata_base__
 317 0054 1B4A     	                ldr     r2, =__data_base__
 318 0056 1C4B     	                ldr     r3, =__data_end__
 319              	dloop:
 320 0058 9A42     	                cmp     r2, r3
 321 005a 3EBF     	                ittt    lo
 322 005c 51F8040B 	                ldrlo   r0, [r1], #4
 323 0060 42F8040B 	                strlo   r0, [r2], #4
 324 0064 F8E7     	                blo     dloop
 325              	#endif
 326              	
 327              	#if CRT0_INIT_BSS == TRUE
 328              	                /* BSS initialization. Note, it assumes that the DATA
 329              	                   size is a multiple of 4 so the linker file must ensure
 330              	                   this.*/
 331 0066 0020     	                movs    r0, #0
 332 0068 1849     	                ldr     r1, =__bss_base__
 333 006a 194A     	                ldr     r2, =__bss_end__
 334              	bloop:
 335 006c 9142     	                cmp     r1, r2
 336 006e 3CBF     	                itt     lo
 337 0070 41F8040B 	                strlo   r0, [r1], #4
 338 0074 FAE7     	                blo     bloop
ARM GAS  /tmp/ccSVH6a2.s 			page 7


 339              	#endif
 340              	
 341              	#if CRT0_INIT_RAM_AREAS == TRUE
 342              	                /* RAM areas initialization.*/
 343 0076 FFF7FEFF 	                bl      __init_ram_areas
 344              	#endif
 345              	
 346              	                /* Late initialization..*/
 347 007a FFF7FEFF 	                bl      __late_init
 348              	
 349              	#if CRT0_CALL_CONSTRUCTORS == TRUE
 350              	                /* Constructors invocation.*/
 351 007e 154C     	                ldr     r4, =__init_array_base__
 352 0080 154D     	                ldr     r5, =__init_array_end__
 353              	initloop:
 354 0082 AC42     	                cmp     r4, r5
 355 0084 03DA     	                bge     endinitloop
 356 0086 54F8041B 	                ldr     r1, [r4], #4
 357 008a 8847     	                blx     r1
 358 008c F9E7     	                b       initloop
 359              	endinitloop:
 360              	#endif
 361              	
 362              	                /* Main program invocation, r0 contains the returned value.*/
 363 008e FFF7FEFF 	                bl      main
 364              	
 365              	#if CRT0_CALL_DESTRUCTORS == TRUE
 366              	                /* Destructors invocation.*/
 367 0092 124C     	                ldr     r4, =__fini_array_base__
 368 0094 124D     	                ldr     r5, =__fini_array_end__
 369              	finiloop:
 370 0096 AC42     	                cmp     r4, r5
 371 0098 03DA     	                bge     endfiniloop
 372 009a 54F8041B 	                ldr     r1, [r4], #4
 373 009e 8847     	                blx     r1
 374 00a0 F9E7     	                b       finiloop
 375              	endfiniloop:
 376              	#endif
 377              	
 378              	                /* Branching to the defined exit handler.*/
 379 00a2 FFF7FEBF 	                b       __default_exit
 379      00000000 
 379      00000000 
 379      00000000 
 379      00000000 
ARM GAS  /tmp/ccSVH6a2.s 			page 8


DEFINED SYMBOLS
.//os/common/startup/ARMCMx/compilers/GCC/crt0_v8m-ml.S:193    .text:0000000000000000 $t
.//os/common/startup/ARMCMx/compilers/GCC/crt0_v8m-ml.S:196    .text:0000000000000000 _crt0_entry
.//os/common/startup/ARMCMx/compilers/GCC/crt0_v8m-ml.S:274    .text:000000000000003a msloop
.//os/common/startup/ARMCMx/compilers/GCC/crt0_v8m-ml.S:285    .text:0000000000000048 psloop
.//os/common/startup/ARMCMx/compilers/GCC/crt0_v8m-ml.S:319    .text:0000000000000058 dloop
.//os/common/startup/ARMCMx/compilers/GCC/crt0_v8m-ml.S:334    .text:000000000000006c bloop
.//os/common/startup/ARMCMx/compilers/GCC/crt0_v8m-ml.S:353    .text:0000000000000082 initloop
.//os/common/startup/ARMCMx/compilers/GCC/crt0_v8m-ml.S:359    .text:000000000000008e endinitloop
.//os/common/startup/ARMCMx/compilers/GCC/crt0_v8m-ml.S:369    .text:0000000000000096 finiloop
.//os/common/startup/ARMCMx/compilers/GCC/crt0_v8m-ml.S:375    .text:00000000000000a2 endfiniloop
.//os/common/startup/ARMCMx/compilers/GCC/crt0_v8m-ml.S:379    .text:00000000000000a6 $d
.//os/common/startup/ARMCMx/compilers/GCC/crt0_v8m-ml.S:379    .text:00000000000000a8 $d

UNDEFINED SYMBOLS
__main_stack_end__
__main_stack_base__
__process_stack_end__
__process_stack_base__
_vectors
__cpu_init
__early_init
__textdata_base__
__data_base__
__data_end__
__bss_base__
__bss_end__
__init_ram_areas
__late_init
__init_array_base__
__init_array_end__
main
__fini_array_base__
__fini_array_end__
__default_exit
